name: Deploy to Cloudflare Pages with R2

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Clean webpack cache
        run: |
          echo "üßπ Cleaning webpack cache directories..."
          rm -rf .next/cache
          mkdir -p .next/cache  # Recreate empty directory to avoid build errors

      - name: Build Next.js app for Cloudflare Pages
        run: |
          chmod +x ./build-pages.sh
          ./build-pages.sh

      - name: Verify no large files
        run: |
          echo "üîç Verifying no files over 25MB exist in the output..."
          find .vercel/output/static -type f -size +20M | while read file; do
            echo "‚ö†Ô∏è Warning: Large file found: $file - removing"
            rm "$file"
          done
          echo "‚úÖ Verification complete."

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Upload to R2 and deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # Upload to R2 bucket
          echo "Uploading build archive to R2 bucket..."
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/r2/buckets/$R2_BUCKET_NAME/objects/pages-build.tar.gz" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/gzip" \
            --data-binary @pages-build.tar.gz

          # Create deployment
          echo "Creating deployment..."
          DEPLOY_RESPONSE=$(curl -X POST "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/stock-recorder/deployments" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"production\": {\"r2_bucket\": \"$R2_BUCKET_NAME\", \"r2_object\": \"pages-build.tar.gz\"}}")
          
          echo "Deployment response: $DEPLOY_RESPONSE"
          
          # Extract deployment URL and ID
          DEPLOY_URL=$(echo $DEPLOY_RESPONSE | jq -r '.result.url')
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.result.id')
          
          echo "Deployment URL: $DEPLOY_URL"
          echo "Deployment ID: $DEPLOY_ID"
          
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          sleep 10
          
          # Set worker permissions
          echo "Setting worker permissions..."
          WORKER_CONFIG_RESPONSE=$(curl -X PATCH "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/stock-recorder/deployments/latest" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"deployment_configs":{"production":{"compatibility_flags":["streams_enable_constructors"],"compatibility_date":"2023-10-30","usage_model":"bundled"}}}')
            
          echo "Worker config response: $WORKER_CONFIG_RESPONSE"
          
          echo "Deployment complete! Site available at: $DEPLOY_URL" 