name: Deploy to Cloudflare Pages with R2

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Clean webpack cache
        run: |
          echo "üßπ Cleaning webpack cache directories..."
          rm -rf .next/cache
          mkdir -p .next/cache  # Recreate empty directory to avoid build errors

      - name: Build Next.js app for Cloudflare Pages
        run: |
          chmod +x ./build-pages.sh
          ./build-pages.sh

      - name: Verify no large files
        run: |
          echo "üîç Verifying no files over 25MB exist in the output..."
          find .vercel/output/static -type f -size +20M | while read file; do
            echo "‚ö†Ô∏è Warning: Large file found: $file - removing"
            rm "$file"
          done
          echo "‚úÖ Verification complete."

      - name: Ensure output directory exists
        run: |
          echo "üîç Checking if .vercel/output/static directory exists..."
          if [ ! -d ".vercel/output/static" ]; then
            echo "‚ö†Ô∏è Output directory not found, creating it..."
            mkdir -p .vercel/output/static
            # Copy files from build output if they exist elsewhere
            if [ -d "out" ]; then
              echo "Copying files from 'out' directory..."
              cp -r out/* .vercel/output/static/
            elif [ -d ".next/static" ]; then
              echo "Setting up minimal structure from .next/static..."
              mkdir -p .vercel/output/static/_next
              cp -r .next/static .vercel/output/static/_next/
              # Create a basic index.html if it doesn't exist
              if [ ! -f ".vercel/output/static/index.html" ]; then
                echo "Creating basic index.html..."
                echo '<!DOCTYPE html><html><head><title>App</title></head><body><div id="__next"></div></body></html>' > .vercel/output/static/index.html
              fi
            fi
          else
            echo "‚úÖ Output directory exists: $(ls -la .vercel/output/static | wc -l) files"
            ls -la .vercel/output/static
          fi
          
          # Create a minimal _worker.js if it doesn't exist
          if [ ! -f ".vercel/output/static/_worker.js" ]; then
            echo "Creating basic _worker.js..."
            echo 'export default { async fetch(request) { return fetch(request); } };' > .vercel/output/static/_worker.js
          fi

      - name: Ensure wrangler.toml is valid
        env:
          PROJECT_NAME: ${{ secrets.CLOUDFLARE_PAGES_PROJECT || 'pantrypal' }}
        run: |
          echo "üîç Creating wrangler.toml configuration..."
          echo "Using project name: $PROJECT_NAME"
          
          # Create wrangler.toml file line by line - much safer than heredoc
          echo "# Cloudflare Pages configuration" > wrangler.toml
          echo "name = \"$PROJECT_NAME\"" >> wrangler.toml
          echo "" >> wrangler.toml
          echo "# Set the build output directory for Pages (this is critical)" >> wrangler.toml
          echo "pages_build_output_dir = \".vercel/output/static\"" >> wrangler.toml
          echo "" >> wrangler.toml
          echo "# Build environment settings" >> wrangler.toml
          echo "[build.environment]" >> wrangler.toml
          echo "NODE_VERSION = \"18.0.0\"" >> wrangler.toml
          echo "NPM_VERSION = \"9.6.7\"" >> wrangler.toml
          echo "NODE_COMPAT = \"true\"" >> wrangler.toml
          echo "" >> wrangler.toml
          echo "# Define site configuration" >> wrangler.toml
          echo "[site]" >> wrangler.toml
          echo "bucket = \".vercel/output/static\"" >> wrangler.toml
          echo "" >> wrangler.toml
          echo "# Worker configuration" >> wrangler.toml
          echo "[worker]" >> wrangler.toml
          echo "compatibility_date = \"2023-10-30\"" >> wrangler.toml
          echo "compatibility_flags = [\"streams_enable_constructors\"]" >> wrangler.toml
          echo "usage_model = \"bundled\"" >> wrangler.toml
          
          echo "‚úÖ Created valid wrangler.toml file"
          cat wrangler.toml
          
          # Verify the file exists and pages_build_output_dir is set
          if ! grep -q "pages_build_output_dir" wrangler.toml; then
            echo "‚ùå pages_build_output_dir not found in wrangler.toml"
            exit 1
          fi

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Create deployment archive
        run: |
          echo "üì¶ Creating deployment archive for Cloudflare Pages..."
          
          # Ensure the .vercel/output/static directory exists
          if [ ! -d ".vercel/output/static" ]; then
            echo "‚ùå Error: .vercel/output/static directory not found!"
            exit 1
          fi
          
          # Create a portable archive with correct structure
          echo "Creating pages-build.tar.gz with proper structure..."
          tar -czvf pages-build.tar.gz .vercel
          
          # Verify the archive contains the expected directories
          echo "Verifying archive contents:"
          tar -tvf pages-build.tar.gz | grep -E "\.vercel/output/static"
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Error: The archive does not contain .vercel/output/static!"
            exit 1
          fi
          
          echo "‚úÖ Archive created successfully with the correct structure"

      - name: Disconnect GitHub integration and deploy from R2
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          CLOUDFLARE_PAGES_PROJECT: ${{ secrets.CLOUDFLARE_PAGES_PROJECT || 'pantrypal' }}
        run: |
          echo "üîß Checking Pages project build configuration..."
          
          # Check if project exists and is using GitHub integration
          PROJECT_INFO=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$CLOUDFLARE_PAGES_PROJECT" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json")
          
          echo "Project info: $PROJECT_INFO"
          
          # If project doesn't exist, create it (without GitHub integration)
          if echo "$PROJECT_INFO" | grep -q '"success":false'; then
            echo "Creating new Pages project without GitHub integration..."
            CREATE_PROJECT=$(curl -X POST "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data "{\"name\":\"$CLOUDFLARE_PAGES_PROJECT\",\"production_branch\":\"main\"}")
            
            echo "Create project response: $CREATE_PROJECT"
          else
            # If project has GitHub integration, disconnect it
            if echo "$PROJECT_INFO" | grep -q '"deployment_configs"'; then
              echo "Disconnecting GitHub integration from Pages project..."
              DISCONNECT_GITHUB=$(curl -X PATCH "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$CLOUDFLARE_PAGES_PROJECT" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data '{"source":{"type":"none"}}')
              
              echo "Disconnect GitHub response: $DISCONNECT_GITHUB"
            else
              echo "Project already exists without GitHub integration."
            fi
          fi

      - name: Upload to R2 and deploy to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          CLOUDFLARE_PAGES_PROJECT: ${{ secrets.CLOUDFLARE_PAGES_PROJECT || 'pantrypal' }}
        run: |
          # Print project name for debugging
          echo "Using Cloudflare Pages project name: $CLOUDFLARE_PAGES_PROJECT"
          
          # Upload to R2 bucket
          echo "Uploading build archive to R2 bucket..."
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/r2/buckets/$R2_BUCKET_NAME/objects/pages-build.tar.gz" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/gzip" \
            --data-binary @pages-build.tar.gz

          # Create deployment
          echo "Creating deployment..."
          DEPLOY_RESPONSE=$(curl -X POST "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$CLOUDFLARE_PAGES_PROJECT/deployments" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "{\"production\": {\"r2_bucket\": \"$R2_BUCKET_NAME\", \"r2_object\": \"pages-build.tar.gz\"}, \"deployment_source\": \"direct_upload\"}")
          
          echo "Deployment response: $DEPLOY_RESPONSE"
          
          # Check if deployment was successful
          if echo "$DEPLOY_RESPONSE" | grep -q '"success":false'; then
            echo "‚ùå Deployment failed. See error details above."
            exit 1
          fi
          
          # Extract deployment URL and ID
          DEPLOY_URL=$(echo $DEPLOY_RESPONSE | jq -r '.result.url // "Not available"')
          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.result.id // "Not available"')
          
          echo "Deployment URL: $DEPLOY_URL"
          echo "Deployment ID: $DEPLOY_ID"
          
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          sleep 10
          
          # Set worker permissions
          echo "Setting worker permissions..."
          WORKER_CONFIG_RESPONSE=$(curl -X PATCH "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$CLOUDFLARE_PAGES_PROJECT/deployments/latest" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"deployment_configs":{"production":{"compatibility_flags":["streams_enable_constructors"],"compatibility_date":"2023-10-30","usage_model":"bundled"}}}')
            
          echo "Worker config response: $WORKER_CONFIG_RESPONSE"
          
          echo "Deployment complete! Site available at: $DEPLOY_URL" 